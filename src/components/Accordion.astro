---
import SectionContainer from "@/components/SectionContainer.astro";
import { Icon } from "astro-icon";
import clsx from "clsx";

const accordionItemType = {
    top: "rounded-t-lg",
    default: "border rounded-none border-t-0",
    bottom: "border border-t-0 rounded-b-lg"
};

const { accordionData } = Astro.props;
---

<SectionContainer
    class="accordion--container my-16 drop-shadow-xl max-w-3xl w-full mx-auto offset-y-0 offset-x-8"
>
    {
        accordionData.map((accordionItem, index) => (
            <div
                id={accordionItem.id}
                class={clsx(
                    "accordion-item--container border border-neutral-200 bg-white overflow-hidden",
                    {
                        [accordionItemType.top]: index === 0,
                        [accordionItemType.default]:
                            index > 0 && index < accordionData.length - 1,
                        [accordionItemType.bottom]:
                            index === accordionData.length - 1
                    }
                )}
            >
                <h2 class="accordion-item--heading mb-0">
                    <button
                        class="group relative flex w-full font-semibold items-center rounded-t-lg border-0 bg-white py-4 px-5 text-left text-base text-neutral-800 transition"
                        type="button"
                        aria-expanded={accordionItem.isOpen}
                    >
                        {accordionItem.title}

                        <Icon
                            name="mdi:chevron-up"
                            class={`ml-auto h-8 w-8 shrink-0 transition-transform duration-200 ease-in-out motion-reduce:transition-none icon ${
                                accordionItem.isOpen
                                    ? "rotate-[0deg]"
                                    : "rotate-0"
                            }`}
                        />
                    </button>
                </h2>
                <div
                    class={`accordion-item--content py-4 px-5 text-base ${
                        accordionItem.isOpen ? "block" : "hidden"
                    }`}
                >
                    <p>{accordionItem.content}</p>
                </div>
            </div>
        ))
    }
</SectionContainer>

<script>
    let activeAccordion = null;

    const accordionClickHandle = (id) => {
        activeAccordion = id === activeAccordion ? null : id;
        updateAccordionVisibility();
    };

    const updateAccordionVisibility = () => {
        const accordionItems = document.querySelectorAll(
            ".accordion-item--container"
        );

        accordionItems.forEach((item) => {
            const accordionId = item.id;
            const content = item.querySelector(".accordion-item--content");
            const icon = item.querySelector(".icon");

            if (accordionId === activeAccordion) {
                content.classList.remove("hidden");
                content.classList.add("block");
                icon.classList.add("rotate-[90deg]");
                icon.classList.remove("rotate-0");
            } else {
                content.classList.remove("block");
                content.classList.add("hidden");
                icon.classList.add("rotate-0");
                icon.classList.remove("rotate-[90deg]");
            }
        });
    };

    document.addEventListener("DOMContentLoaded", () => {
        const buttons = document.querySelectorAll(
            ".accordion-item--heading button"
        );

        buttons.forEach((button) => {
            button.addEventListener("click", () => {
                const accordionId = button.parentElement.parentElement.id;
                accordionClickHandle(accordionId);
            });
        });
    });
</script>
